# -*- coding: utf-8 -*-
from typing import Dict, Any, NoReturn
from pathlib import PurePosixPath
from warnings import warn
from copy import deepcopy
from io import StringIO

import fsspec
from kedro.io.core import (
    AbstractVersionedDataSet,
    Version,
    get_filepath_str,
    get_protocol_and_path,
    DataSetError
)

import pyLDAvis


class PyLDAVisWriter(AbstractVersionedDataSet):
    DEFAULT_SAVE_ARGS = {}  # type: Dict[str, Any]

    def __init__(
            self,
            filepath: str,
            fs_args: Dict[str, Any] = None,
            credentials: Dict[str, Any] = None,
            save_args: Dict[str, Any] = None,
            version: Version = None,
            overwrite: bool = False,
    ) -> None:
        """Creates a new instance of ``pyLDAvisWriter``.
        Args:
            filepath: Filepath in POSIX format to save pyLDAvis objects to, prefixed with a
                protocol like `s3://`. If prefix is not provided, `file` protocol (local filesystem)
                will be used. The prefix should be any protocol supported by ``fsspec``.
            fs_args: Extra arguments to pass into underlying filesystem class constructor
                (e.g. `{"project": "my-project"}` for ``GCSFileSystem``), as well as
                to pass to the filesystem's `open` method through nested key `open_args_save`.
                Here you can find all available arguments for `open`:
                https://filesystem-spec.readthedocs.io/en/latest/api.html#fsspec.spec.AbstractFileSystem.open
                All defaults are preserved, except `mode`, which is set to `wb` when saving.
            credentials: Credentials required to get access to the underlying filesystem.
                E.g. for ``S3FileSystem`` it should look like:
                `{'key': '<id>', 'secret': '<key>'}}`
            save_args: Save args passed to `pyLDAvis.save_html`. See
                https://pyldavis.readthedocs.io/en/latest/modules/API.html#pyLDAvis.save_html
            version: If specified, should be an instance of
                ``kedro.io.core.Version``. If its ``load`` attribute is
                None, the latest version will be loaded. If its ``save``
                attribute is None, save version will be autogenerated.
            overwrite: If True, any existing image files will be removed.
                Only relevant when saving multiple pyLDAvis objects at
                once.
        """
        _credentials = deepcopy(credentials) or {}
        _fs_args = deepcopy(fs_args) or {}
        _fs_open_args_save = _fs_args.pop("open_args_save", {})
        _fs_open_args_save.setdefault("mode", "w")

        protocol, path = get_protocol_and_path(filepath, version)
        if protocol == "file":
            _fs_args.setdefault("auto_mkdir", True)

        self._protocol = protocol
        self._fs = fsspec.filesystem(self._protocol, **_credentials, **_fs_args)

        super().__init__(
            filepath=PurePosixPath(path),
            version=version,
            exists_function=self._fs.exists,
            glob_function=self._fs.glob,
        )

        self._fs_open_args_save = _fs_open_args_save

        # Handle default save arguments
        self._save_args = deepcopy(self.DEFAULT_SAVE_ARGS)
        if save_args is not None:
            self._save_args.update(save_args)

        if overwrite and version is not None:
            warn(
                "Setting 'overwrite=True' is ineffective if versioning "
                "is enabled, since the versioned path must not already "
                "exist; overriding flag with 'overwrite=False' instead."
            )
            overwrite = False
        self._overwrite = overwrite

    def _describe(self) -> Dict[str, Any]:
        return dict(
            filepath=self._filepath,
            protocol=self._protocol,
            save_args=self._save_args,
            version=self._version,
        )

    def _load(self) -> NoReturn:
        raise DataSetError(f"Loading not supported for '{self.__class__.__name__}'")

    def _save(self, report: pyLDAvis.PreparedData) -> None:
        save_path = self._get_save_path()

        if self._overwrite and self._exists():
            self._fs.rm(get_filepath_str(save_path, self._protocol), recursive=True)

        full_key_path = get_filepath_str(save_path, self._protocol)
        self._save_to_fs(full_key_path=full_key_path, report=report)

    def _save_to_fs(self, full_key_path: str, report: pyLDAvis.PreparedData):
        buffer = StringIO()
        pyLDAvis.save_html(report, buffer, **self._save_args)

        with self._fs.open(full_key_path, **self._fs_open_args_save) as fs_file:
            fs_file.write(buffer.getvalue())

    def _exists(self) -> bool:
        load_path = get_filepath_str(self._get_load_path(), self._protocol)
        return self._fs.exists(load_path)
